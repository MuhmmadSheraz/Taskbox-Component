[{"E:\\task-box\\src\\stories\\Button.stories.tsx":"1","E:\\task-box\\src\\stories\\Header.stories.tsx":"2","E:\\task-box\\src\\stories\\Page.stories.tsx":"3","E:\\task-box\\src\\stories\\Page.tsx":"4","E:\\task-box\\src\\stories\\Header.tsx":"5","E:\\task-box\\src\\stories\\Button.tsx":"6","E:\\task-box\\src\\components\\Task.stories.tsx":"7","E:\\task-box\\src\\components\\Task.tsx":"8","E:\\task-box\\src\\components\\TaskList.stories.tsx":"9","E:\\task-box\\src\\components\\TaskList.tsx":"10","E:\\task-box\\src\\lib\\redux.tsx":"11","E:\\task-box\\src\\components\\InboxScreen.stories.tsx":"12","E:\\task-box\\src\\components\\InboxScreen.tsx":"13","E:\\task-box\\src\\index.tsx":"14","E:\\task-box\\src\\reportWebVitals.ts":"15","E:\\task-box\\src\\App.tsx":"16"},{"size":804,"mtime":499162500000,"results":"17","hashOfConfig":"18"},{"size":510,"mtime":499162500000,"results":"19","hashOfConfig":"18"},{"size":605,"mtime":499162500000,"results":"20","hashOfConfig":"18"},{"size":2415,"mtime":499162500000,"results":"21","hashOfConfig":"18"},{"size":1356,"mtime":499162500000,"results":"22","hashOfConfig":"18"},{"size":941,"mtime":499162500000,"results":"23","hashOfConfig":"18"},{"size":651,"mtime":1610385824292,"results":"24","hashOfConfig":"18"},{"size":1453,"mtime":1610473458762,"results":"25","hashOfConfig":"18"},{"size":1502,"mtime":1610460802891,"results":"26","hashOfConfig":"18"},{"size":2345,"mtime":1610472259649,"results":"27","hashOfConfig":"18"},{"size":1249,"mtime":1610462195964,"results":"28","hashOfConfig":"18"},{"size":812,"mtime":1610385767702,"results":"29","hashOfConfig":"18"},{"size":1613,"mtime":1610460840045,"results":"30","hashOfConfig":"18"},{"size":500,"mtime":499162500000,"results":"31","hashOfConfig":"18"},{"size":425,"mtime":499162500000,"results":"32","hashOfConfig":"18"},{"size":297,"mtime":1610454545972,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"4mhn2n",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},"E:\\task-box\\src\\stories\\Button.stories.tsx",[],["72","73"],"E:\\task-box\\src\\stories\\Header.stories.tsx",[],"E:\\task-box\\src\\stories\\Page.stories.tsx",[],"E:\\task-box\\src\\stories\\Page.tsx",[],"E:\\task-box\\src\\stories\\Header.tsx",[],"E:\\task-box\\src\\stories\\Button.tsx",[],"E:\\task-box\\src\\components\\Task.stories.tsx",["74"],"import React from \"react\";\r\n\r\nimport Task from \"./Task\";\r\n\r\nexport default {\r\n  component: Task,\r\n  title: \"Task\",\r\n};\r\n\r\nconst Template: any = (args: any) => <Task {...args} />;\r\n\r\nexport const Default = Template.bind({});\r\nDefault.args = {\r\n  task: {\r\n    id: \"1\",\r\n    title: \"Test Task\",\r\n    state: \"TASK_INBOX\",\r\n    updatedAt: new Date(2018, 0, 1, 9, 0),\r\n  },\r\n};\r\n\r\nexport const Pinned = Template.bind({});\r\nPinned.args = {\r\n  task: {\r\n    ...Default.args.task,\r\n    state: \"TASK_PINNED\",\r\n  },\r\n};\r\n\r\nexport const Archived = Template.bind({});\r\nArchived.args = {\r\n  task: {\r\n    ...Default.args.task,\r\n    state: \"TASK_ARCHIVED\",\r\n  },\r\n};\r\n","E:\\task-box\\src\\components\\Task.tsx",[],"E:\\task-box\\src\\components\\TaskList.stories.tsx",["75"],"// src/components/TaskList.stories.js\r\n\r\nimport React from \"react\";\r\n\r\nimport { TaskList } from \"./TaskList\";\r\nimport * as TaskStories from \"./Task.stories\";\r\n\r\nexport default {\r\n  component: TaskList,\r\n  title: \"TaskList\",\r\n  decorators: [\r\n    (story: any) => <div style={{ padding: \"3rem\" }}>{story()}</div>,\r\n  ],\r\n};\r\n\r\nconst Template: any = (args: any) => <TaskList {...args} />;\r\n\r\nexport const Default = Template.bind({});\r\nDefault.args = {\r\n  tasks: [\r\n    { ...TaskStories.Default.args.task, id: \"1\", title: \"Task 1\" },\r\n    { ...TaskStories.Default.args.task, id: \"2\", title: \"Task 2\" },\r\n    { ...TaskStories.Default.args.task, id: \"3\", title: \"Task 3\" },\r\n    { ...TaskStories.Default.args.task, id: \"4\", title: \"Task 4\" },\r\n    { ...TaskStories.Default.args.task, id: \"5\", title: \"Task 5\" },\r\n    { ...TaskStories.Default.args.task, id: \"6\", title: \"Task 6\" },\r\n  ],\r\n};\r\n\r\nexport const WithPinnedTasks = Template.bind({});\r\nWithPinnedTasks.args = {\r\n  // Shaping the stories through args composition.\r\n  // Inherited data coming from the Default story.\r\n  tasks: [\r\n    ...Default.args.tasks.slice(0, 5),\r\n    { id: \"6\", title: \"Task 6 (pinned)\", state: \"TASK_PINNED\" },\r\n  ],\r\n};\r\n\r\nexport const Loading = Template.bind({});\r\nLoading.args = {\r\n  tasks: [],\r\n  loading: true,\r\n};\r\n\r\nexport const Empty = Template.bind({});\r\nEmpty.args = {\r\n  // Shaping the stories through args composition.\r\n  // Inherited data coming from the Loading story.\r\n  ...Loading.args,\r\n  loading: false,\r\n};\r\n","E:\\task-box\\src\\components\\TaskList.tsx",["76"],"import React from \"react\";\r\nimport Task from \"../components/Task\";\r\n// import \"../../index.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport interface TasksListProps {\r\n  tasks: any;\r\n  loading: boolean;\r\n  onPinTask?: any;\r\n  onArchiveTask?: any;\r\n}\r\n\r\nexport const TaskList: React.FC<TasksListProps> = ({\r\n  tasks,\r\n  loading,\r\n  onPinTask,\r\n  onArchiveTask,\r\n}) => {\r\n  const events = {\r\n    onPinTask,\r\n    onArchiveTask,\r\n  };\r\n  const [allTask, setAllTask] = React.useState<any>([]);\r\n  React.useEffect(() => {\r\n\r\n    setAllTask(tasks);\r\n    console.log(\"Task Use Effect ===>\", tasks);\r\n  }, [tasks]);\r\n  const LoadingRow = (\r\n    <div className=\"loading-item\">\r\n      <span className=\"glow-checkbox\" />\r\n      <span className=\"glow-text\">\r\n        <span>Loading</span>\r\n        <span>cool</span>\r\n        <span>state</span>\r\n      </span>\r\n    </div>\r\n  );\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"list-items\">\r\n        {LoadingRow}\r\n        {LoadingRow}\r\n        {LoadingRow}\r\n        {LoadingRow}\r\n        {LoadingRow}\r\n        {LoadingRow}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (tasks?.length === 0) {\r\n    return (\r\n      <div className=\"list-items\">\r\n        <div className=\"wrapper-message\">\r\n          <span className=\"icon-check\" />\r\n          <div className=\"title-message\">You have no task</div>\r\n          <div className=\"subtitle-message\">Sit back and relax</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  } \r\n\r\n  // const TasksInOrder: any = [\r\n  //   ...tasks.filter((t: any) => t.state === \"TASK_PINNED\"),\r\n\r\n  //   ...tasks.filter((t: any) => t.state !== \"TASK_PINNED\"),\r\n  // ];\r\n  const tasksInOrder = [\r\n    ...tasks.filter((t: any) => t.state === \"TASK_PINNED\"),\r\n    ...tasks.filter((t: any) => t.state !== \"TASK_PINNED\"),\r\n  ];\r\n  return (\r\n    <div className=\"list-items\">\r\n      {tasksInOrder.map((task) => (\r\n        <Task key={task.id} task={task} {...events} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nTaskList.propTypes = {\r\n  /** Checks if it's in loading state */\r\n  // loading: PropTypes.bool,\r\n  /** The list of tasks */\r\n  // tasks: PropTypes.arrayOf(Task.propTypes.task).isRequired,\r\n  /** Event to change the task to pinned */\r\n  onPinTask: PropTypes.func,\r\n  /** Event to change the task to archived */\r\n  onArchiveTask: PropTypes.func,\r\n};\r\nTaskList.defaultProps = {\r\n  loading: false,\r\n};\r\n","E:\\task-box\\src\\lib\\redux.tsx",[],"E:\\task-box\\src\\components\\InboxScreen.stories.tsx",["77"],"import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport { action } from \"@storybook/addon-actions\";\r\nimport { PureInboxScreen } from \"./InboxScreen\";\r\nimport * as TaskListStories from \"./TaskList.stories\";\r\n\r\n// A super-simple mock of a redux store\r\nconst store: any = {\r\n  getState: () => {\r\n    return {\r\n      tasks: TaskListStories.Default.args.tasks,\r\n    };\r\n  },\r\n  subscribe: () => 0,\r\n  dispatch: action(\"dispatch\"),\r\n};\r\n\r\nexport default {\r\n  component: PureInboxScreen,\r\n  decorators: [(story: any) => <Provider store={store}>{story()}</Provider>],\r\n  title: \"InboxScreen\",\r\n};\r\n\r\nconst Template: any = (args: any) => <PureInboxScreen {...args} />;\r\n\r\nexport const Default = Template.bind({});\r\n\r\nexport const Error = Template.bind({});\r\nError.args = {\r\n  error: \"Something\",\r\n};\r\n","E:\\task-box\\src\\components\\InboxScreen.tsx",[],"E:\\task-box\\src\\index.tsx",[],["78","79"],"E:\\task-box\\src\\reportWebVitals.ts",[],"E:\\task-box\\src\\App.tsx",[],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":5,"column":1,"nodeType":"86","endLine":8,"endColumn":3},{"ruleId":"84","severity":1,"message":"85","line":8,"column":1,"nodeType":"86","endLine":14,"endColumn":3},{"ruleId":"87","severity":1,"message":"88","line":23,"column":10,"nodeType":"89","messageId":"90","endLine":23,"endColumn":17},{"ruleId":"84","severity":1,"message":"85","line":18,"column":1,"nodeType":"86","endLine":22,"endColumn":3},{"ruleId":"80","replacedBy":"91"},{"ruleId":"82","replacedBy":"92"},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","@typescript-eslint/no-unused-vars","'allTask' is assigned a value but never used.","Identifier","unusedVar",["93"],["94"],"no-global-assign","no-unsafe-negation"]